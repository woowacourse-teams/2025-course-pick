name: Backend Prod Server CD

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-prod-cd.yml'
  workflow_dispatch:

jobs:
  # 0) 프로젝트 빌드
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend

    steps:
      - name: 레포지토리 불러오기
        uses: actions/checkout@v4

      - name: JDK 21 설정
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'corretto'
          cache: 'gradle'

      - name: 프로젝트 gradlew 빌드
        run: ./gradlew build

      - name: 테스트 결과 보고서 작성
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: 테스트 결과
          path: backend/build/test-results/test/*.xml
          reporter: java-junit

      - name: 임시 아티팩트 저장소 업로드
        uses: actions/upload-artifact@v4
        with:
          name: coursepick
          path: backend/build/libs/*SNAPSHOT.jar

  # 1) 유휴 서버 탐지
  detect-idle:
    name: Detect Idle App Server
    runs-on: [ self-hosted, prod-lb ]
    outputs:
      idle-server: ${{ steps.find.outputs.idle }}
    steps:
      - name: 탐침 스크립트 실행
        id: find
        run: |
          # health 체크할 서버 목록
          declare -A servers=(
            [server1]="${{ secrets.SERVER1_HEALTH_URL }}"
            [server2]="${{ secrets.SERVER2_HEALTH_URL }}"
          )

          idle=""
          for name in "${!servers[@]}"; do
            code=$(curl -s -o /dev/null -w "%{http_code}" "${servers[$name]}" || echo "")
            if [[ "$code" -ne 200 ]]; then
              idle=$name
              break
            fi
          done

          if [[ -z "$idle" ]]; then
            echo "Both servers are healthy – cannot find idle server" >&2
            exit 1
          fi

          echo "::set-output name=idle::$idle"

  # 2) 유휴 서버에 배포 (server1 / server2 중 하나만 실행)
  deploy-app-server1:
    name: Deploy to App Server 1
    needs: detect-idle
    if: needs.detect-idle.outputs.idle-server == 'server1'
    runs-on: [ self-hosted, prod-app-1 ]
    defaults:
      run:
        working-directory: backend
    steps:
      - name: 임시 아티팩트 저장소에 저장된 파일 다운로드
        uses: actions/download-artifact@v4
        with:
          name: coursepick
          path: ./artifacts

      - name: 기존 80 포트 서버 내리기
        run: |
          PID=$(sudo lsof -t -i :80 || true)

          if [ -n "$PID" ]; then
          	echo "사용중인 포트 80 서버 종료... PID=$PID"
          	sudo kill -15 $PID || true
          	sleep 5

          	CHECK_PID=$(sudo lsof -t -i :80 || true)
          	if [ -z "$CHECK_PID" ]; then
          		echo "기존 서버 종료됨"
          	else
          		echo "기존 서버 종료되지 않아 강제 종료 수행... PID=$CHECK_PID"
          		sudo kill -9 $CHECK_PID || true
          		sleep 5
          	fi
          else
          	echo "포트 80은 사용 중이지 않음"
          fi

      - name: 새로운 서버로 실행
        env:
          SPRING_PROFILES_ACTIVE: ${{ secrets.DEV_PROFILE }}
          SERVER_PORT: 80
          SPRING_DATASOURCE_URL: ${{ secrets.DEV_DB_URL }}
          SPRING_DATASOURCE_USERNAME: ${{ secrets.DEV_DB_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.DEV_DB_PASSWORD }}
          ADMIN_TOKEN: ${{ secrets.DEV_ADMIN_TOKEN }}
        run: |
          JAR_FILE=$(find ./artifacts -name "*.jar" | head -n 1)
          echo "서버 시작 중... =$JAR_FILE"

          sudo -E -b sh -c "java -jar '$JAR_FILE' > /var/log/app.log 2>&1"

          for i in $(seq 1 10)
          do
            SERVER_STATUS=$(curl -o /dev/null -w "%{http_code}" http://localhost:80/actuator/health || true)

            if [ "$SERVER_STATUS" -eq 200 ]; then
              echo "서버 정상적으로 실행됨 status=$SERVER_STATUS"
              break
            else
              echo "헬스체크에 실패함. 5초 후 다시 시도"
              sleep 5
            fi

            if [ $i -eq 10 ]; then
              echo "서버가 정상적으로 실행되지 않아 종료함"
              exit 1
            fi
          done

          echo "-- 배포 종료 --"

  deploy-app-server2:
    name: Deploy to App Server 2
    needs: detect-idle
    if: needs.detect-idle.outputs.idle-server == 'server2'
    runs-on: [ self-hosted, prod-app-2 ]
    defaults:
      run:
        working-directory: backend
    steps:
      - name: 임시 아티팩트 저장소에 저장된 파일 다운로드
        uses: actions/download-artifact@v4
        with:
          name: coursepick
          path: ./artifacts

      - name: 기존 80 포트 서버 내리기
        run: |
          PID=$(sudo lsof -t -i :80 || true)

          if [ -n "$PID" ]; then
          	echo "사용중인 포트 80 서버 종료... PID=$PID"
          	sudo kill -15 $PID || true
          	sleep 5

          	CHECK_PID=$(sudo lsof -t -i :80 || true)
          	if [ -z "$CHECK_PID" ]; then
          		echo "기존 서버 종료됨"
          	else
          		echo "기존 서버 종료되지 않아 강제 종료 수행... PID=$CHECK_PID"
          		sudo kill -9 $CHECK_PID || true
          		sleep 5
          	fi
          else
          	echo "포트 80은 사용 중이지 않음"
          fi

      - name: 새로운 서버로 실행
        env:
          SPRING_PROFILES_ACTIVE: ${{ secrets.DEV_PROFILE }}
          SERVER_PORT: 80
          SPRING_DATASOURCE_URL: ${{ secrets.DEV_DB_URL }}
          SPRING_DATASOURCE_USERNAME: ${{ secrets.DEV_DB_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.DEV_DB_PASSWORD }}
          ADMIN_TOKEN: ${{ secrets.DEV_ADMIN_TOKEN }}
        run: |
          JAR_FILE=$(find ./artifacts -name "*.jar" | head -n 1)
          echo "서버 시작 중... =$JAR_FILE"

          sudo -E -b sh -c "java -jar '$JAR_FILE' > /var/log/app.log 2>&1"

          for i in $(seq 1 10)
          do
            SERVER_STATUS=$(curl -o /dev/null -w "%{http_code}" http://localhost:80/actuator/health || true)

            if [ "$SERVER_STATUS" -eq 200 ]; then
              echo "서버 정상적으로 실행됨 status=$SERVER_STATUS"
              break
            else
              echo "헬스체크에 실패함. 5초 후 다시 시도"
              sleep 5
            fi

            if [ $i -eq 10 ]; then
              echo "서버가 정상적으로 실행되지 않아 종료함"
              exit 1
            fi
          done

          echo "-- 배포 종료 --"

  # 3) 로드밸런서에 nginx 설정 반영
  update-nginx:
    name: Update nginx on Load Balancer
    needs: [ deploy-app-server1, deploy-app-server2 ]
    runs-on: [ self-hosted, prod-lb ]
    steps:
      - name: nginx.conf 갱신
        run: |
          docker exec -it nginx sh;
          cd etc/nginx;
          cat nginx.conf > nginx-temp.conf;
          cat nginx-sub.conf > nginx.conf;
          cat nginx-temp.conf > nginx-sub.conf;

      - name: nginx 리로드
        run: nginx -s reload;


  # 2) 구버전 서버 종료 (server1 / server2 중 하나만 실행)
  shutdown-app-server1:
    name: Shutdown App Server 1
    needs: update-nginx
    if: needs.detect-idle.outputs.idle-server == 'server2'
    runs-on: [ self-hosted, prod-app-1 ]
    steps:
      - name: 기존 80 포트 서버 내리기
        run: |
          PID=$(sudo lsof -t -i :80 || true)

          if [ -n "$PID" ]; then
          	echo "사용중인 포트 80 서버 종료... PID=$PID"
          	sudo kill -15 $PID || true
          	sleep 5

          	CHECK_PID=$(sudo lsof -t -i :80 || true)
          	if [ -z "$CHECK_PID" ]; then
          		echo "기존 서버 종료됨"
          	else
          		echo "기존 서버 종료되지 않아 강제 종료 수행... PID=$CHECK_PID"
          		sudo kill -9 $CHECK_PID || true
          		sleep 5
          	fi
          else
          	echo "포트 80은 사용 중이지 않음"
          fi

  shutdown-app-server2:
    name: Shutdown App Server 2
    needs: update-nginx
    if: needs.detect-idle.outputs.idle-server == 'server1'
    runs-on: [ self-hosted, prod-app-2 ]
    steps:
      - name: 기존 80 포트 서버 내리기
        run: |
          PID=$(sudo lsof -t -i :80 || true)

          if [ -n "$PID" ]; then
          	echo "사용중인 포트 80 서버 종료... PID=$PID"
          	sudo kill -15 $PID || true
          	sleep 5

          	CHECK_PID=$(sudo lsof -t -i :80 || true)
          	if [ -z "$CHECK_PID" ]; then
          		echo "기존 서버 종료됨"
          	else
          		echo "기존 서버 종료되지 않아 강제 종료 수행... PID=$CHECK_PID"
          		sudo kill -9 $CHECK_PID || true
          		sleep 5
          	fi
          else
          	echo "포트 80은 사용 중이지 않음"
          fi

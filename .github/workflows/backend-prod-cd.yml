name: Backend Prod Server CD

on:
  pull_request:
    branches: [ backend ]
    paths:
      - 'backend/**'
      - '.github/workflows/backend-prod-cd.yml'
  workflow_dispatch:

jobs:
  build:
    name: 프로젝트 빌드
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend

    steps:
      - name: 레포지토리 불러오기
        uses: actions/checkout@v4

      - name: JDK 21 설정
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'corretto'
          cache: 'gradle'

      - name: 프로젝트 gradlew 빌드
        run: ./gradlew build

      - name: 테스트 결과 보고서 작성
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: 테스트 결과
          path: backend/build/test-results/test/*.xml
          reporter: java-junit

      - name: Docker 로그인
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker 이미지 빌드 및 푸시
        run: |
          docker buildx build \
            --platform=linux/arm64 \
            -t ${{ secrets.DOCKER_USERNAME }}/coursepick-backend:prod \
            --push \
            .

  # 1) 유휴 서버 탐지
  detect-idle:
    name: 쉬고있는 EC2 서버 탐지
    needs: build
    runs-on: [ self-hosted, prod-lb ]
    outputs:
      idle-server: ${{ steps.find.outputs.idle }}
    steps:
      - name: 탐침 스크립트 실행
        id: find
        run: |
          # health 체크할 서버 목록
          declare -A servers=(
            [prod-app-1]="${{ secrets.PROD_APP_1_HEALTH_URL }}"
            [prod-app-2]="${{ secrets.PROD_APP_2_HEALTH_URL }}"
          )

          idle=""
          for name in "${!servers[@]}"; do
            code=$(curl -s -o /dev/null -w "%{http_code}" "${servers[$name]}" || echo "")
            if [[ "$code" -ne 200 ]]; then
              idle=$name
              break
            fi
          done

          if [[ -z "$idle" ]]; then
            echo "Both servers are healthy – cannot find idle server" >&2
            exit 1
          fi

          echo "idle=$idle" >> $GITHUB_OUTPUT

  # 2) 유휴 서버에 배포 (server1 / server2 중 하나만 실행)
  deploy-prod-app-1:
    name: prod-app-1 서버에 배포
    needs: detect-idle
    if: needs.detect-idle.outputs.idle-server == 'prod-app-1'
    uses: ./.github/workflows/prod-app-cd.yml
    with:
      run_id: ${{ github.run_id }}
      main_runner: prod-app-1
      sub_runner: prod-app-2
    secrets: inherit

  deploy-prod-app-2:
    name: prod-app-2 서버에 배포
    needs: detect-idle
    if: needs.detect-idle.outputs.idle-server == 'prod-app-2'
    uses: ./.github/workflows/prod-app-cd.yml
    with:
      run_id: ${{ github.run_id }}
      main_runner: prod-app-2
      sub_runner: prod-app-1
    secrets: inherit

name: Backend Dev Server CD

on:
  push:
    branches: [ backend ]
  workflow_dispatch:

jobs:
  build:
    name: 도커 이미지 빌드 & 푸시
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: backend

    steps:
      - name: 레포지토리 불러오기
        uses: actions/checkout@v4

      - name: JDK 21 설정
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'corretto'
          cache: 'gradle'

      - name: 프로젝트 gradlew 빌드
        run: ./gradlew build

      - name: 테스트 결과 보고서 작성
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: 테스트 결과
          path: backend/build/test-results/test/*.xml
          reporter: java-junit

      - name: Docker 로그인
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker 이미지 빌드 및 푸시
        run: |
          docker buildx build \
            --platform=linux/arm64 \
            -t ${{ secrets.DOCKER_USERNAME }}/coursepick-backend:dev \
            --push \
            .

  deploy:
    name: 개발서버 배포
    needs: build
    runs-on: [ self-hosted, dev-app ]
    defaults:
      run:
        working-directory: /home/ssm-user/coursepick

    steps:
      - name: Docker 로그인
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: .env 파일 생성
        run: |
          cat > .env <<'EOF'
          ${{ secrets.DEV_ENV_FILE }}
          EOF
          chmod 600 .env

      - name: 새로운 서버 시작
        run: |
          sudo docker compose --env-file .env up -d --pull always backend

      - name: 사용하지 않는 도커 이미지 정리
        run: |
          sudo docker image prune -a -f

      - name: 시작된 서버 헬스체크
        run: |
          for i in $(seq 1 10)
          do
            SERVER_STATUS=$(curl -o /dev/null -w "%{http_code}" http://localhost:80/actuator/health || true)

            if [ "$SERVER_STATUS" -eq 200 ]; then
              echo "서버 정상적으로 실행됨 status=$SERVER_STATUS"
              break
            else
              echo "헬스체크에 실패함. 5초 후 다시 시도"
              sleep 5
            fi

            if [ $i -eq 10 ]; then
              echo "서버가 정상적으로 실행되지 않아 종료함"
              exit 1
            fi
          done
